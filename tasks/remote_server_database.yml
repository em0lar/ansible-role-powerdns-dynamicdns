- name: Check if file with current installed version exists
  stat:
    path: "{{ powerdns_dynamicdns_database_file }}"
  register: stat_version_file

- block:
  - name: Make sure pdns-user owns database directory
    file:
      path: "{{ powerdns_dynamicdns_database_file | dirname }}"
      owner: "pdns"
      state: directory

  - name: Upload database schema if sqlite3 database is not existing
    copy:
      src: "schema.sql"
      dest: "/tmp/powerdns_sqlite3_schema.sql"
      mode: 0600
      owner: "pdns"

  - name: Template sqlite3 database
    shell: "sqlite3 {{ powerdns_dynamicdns_database_file }} < /tmp/powerdns_sqlite3_schema.sql"
    become_user: "pdns"

  - name: Delete uploaded database schema
    file:
      path: "/tmp/powerdns_sqlite3_schema.sql"
      state: absent

  when: not stat_version_file.stat.exists

- name: "Check if domain '{{ powerdns_dynamicdns_zone }}' is already in database"
  command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT id FROM domains WHERE name='{{ powerdns_dynamicdns_zone }}';\""
  register: sqlite3_command_domain_check
  changed_when: false

- name: "Add domain '{{ powerdns_dynamicdns_zone }}' to database when not already existing"
  command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"INSERT INTO domains (name, type) VALUES ('{{ powerdns_dynamicdns_zone }}', 'MASTER');\""
  when: sqlite3_command_domain_check.stdout | length == 0

- name: "Get id of domain '{{ powerdns_dynamicdns_zone }}' out of database"
  command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT id FROM domains WHERE name='{{ powerdns_dynamicdns_zone }}';\""
  changed_when: false
  register: sqlite3_command_domain_id

- block:
    - name: Check if TSIG key is in database
      command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT * FROM tsigkeys WHERE name='{{ powerdns_dynamicdns_tsig_key_name }}';\""
      changed_when: false
      register: sqlite3_command_tsig_key_check

    - name: Generate TSIG key
      command: "pdnsutil generate-tsig-key {{ powerdns_dynamicdns_tsig_key_name }} hmac-sha512"
      when: sqlite3_command_tsig_key_check.stdout | length == 0

    - name: Get TSIG key secret out of database
      command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT secret FROM tsigkeys WHERE name='{{ powerdns_dynamicdns_tsig_key_name }}';\""
      changed_when: false
      register: sqlite3_command_tsig_key_secret

    - name: Get TSIG key algorithm out of database
      command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT algorithm FROM tsigkeys WHERE name='{{ powerdns_dynamicdns_tsig_key_name }}';\""
      changed_when: false
      register: sqlite3_command_tsig_key_algorithm

    - set_fact:
        powerdns_dynamicdns_domainmetadata: "{{ powerdns_dynamicdns_domainmetadata + [{'key': 'TSIG-ALLOW-DNSUPDATE', 'value': powerdns_dynamicdns_tsig_key_name}] }}"

- include_tasks: domainmetadata.yml
  loop: "{{ powerdns_dynamicdns_domainmetadata }}"

- name: Check if domain already has SOA record
  command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"SELECT * from records WHERE type='SOA' AND domain_id='{{ sqlite3_command_domain_id.stdout }}'\""
  changed_when: false
  register: sqlite3_command_soa_record_check

- name: Set Initial SOA record
  command: "sqlite3 {{ powerdns_dynamicdns_database_file }} \"INSERT INTO records (domain_id, name, content, type,ttl,prio) VALUES ({{ sqlite3_command_domain_id.stdout }},'{{ powerdns_dynamicdns_zone }}','{{ powerdns_dynamicdns_soa_record_mname }} {{ powerdns_dynamicdns_soa_record_rname }} 1 1800 1800 86400 {{ powerdns_dynamicdns_soa_record_min_ttl }}','SOA',86400,NULL);\""
  when: sqlite3_command_soa_record_check.stdout | length == 0

- name: Add nameserver records to zone
  include_tasks: "nameserver.yml"
  loop: "{{ powerdns_dynamicdns_nameservers }}"
  when: powerdns_dynamicdns_nameservers is defined
